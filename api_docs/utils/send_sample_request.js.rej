diff a/api_docs/utils/send_sample_request.js b/api_docs/utils/send_sample_request.js	(rejected hunks)
@@ -1,117 +1,45 @@
-define([
-    'jquery',
-    'lodash'
-], function($, _) {
-
-    const initDynamic = function() {
-        // Button send
-        $(".sample-request-send").off("click");
-        $(".sample-request-send").on("click", function(e) {
-            e.preventDefault();
-            const $root = $(this).parents("article");
-            const group = $root.data("group");
-            const name = $root.data("name");
-            const version = $root.data("version");
-            sendSampleRequest(group, name, version, $(this).data("sample-request-type"));
-        });
-
-        // Button clear
-        $(".sample-request-clear").off("click");
-        $(".sample-request-clear").on("click", function(e) {
-            e.preventDefault();
-            const $root = $(this).parents("article");
-            const group = $root.data("group");
-            const name = $root.data("name");
-            const version = $root.data("version");
-            clearSampleRequest(group, name, version);
-        });
-    }; // initDynamic
-
-    function sendSampleRequest(group, name, version, type)
-    {
-        const $root = $('article[data-group="' + group + '"][data-name="' + name + '"][data-version="' + version + '"]');
-
-        // Optional header
-        const header = {};
-        $root.find(".sample-request-header:checked").each(function(i, element) {
-            const group = $(element).data("sample-request-header-group-id");
-            $root.find("[data-sample-request-header-group=\"" + group + "\"]").each(function(i, element) {
-                const key = $(element).data("sample-request-header-name");
-                let value = element.value;
-                if (typeof element.optional === 'undefined') {
-                  element.optional = true;
-                }
-                if ( ! element.optional && element.defaultValue !== '') {
-                    value = element.defaultValue;
-                }
-                header[key] = value;
-            });
-        });
-
-
-        // create JSON dictionary of parameters
-        let param = {};
-        const paramType = {};
-        const bodyFormData = {};
-        const bodyFormDataType = {};
-        let bodyJson = '';
-        $root.find(".sample-request-param:checked").each(function(i, element) {
-            const group = $(element).data("sample-request-param-group-id");
-            const contentType = $(element).nextAll('.sample-header-content-type-switch').first().val();
-            if (contentType == "body-json"){
-                $root.find("[data-sample-request-body-group=\"" + group + "\"]").not(function(){
-                    return $(this).val() == "" && $(this).is("[data-sample-request-param-optional='true']");
-                }).each(function(i, element) {
-                    if (isJson(element.value)){
-                        header['Content-Type'] = 'application/json';
-                        bodyJson = element.value;
-                    }
-                });
-            }else {
-                $root.find("[data-sample-request-param-group=\"" + group + "\"]").not(function(){
-                    return $(this).val() == "" && $(this).is("[data-sample-request-param-optional='true']");
-                }).each(function(i, element) {
-                    const key = $(element).data("sample-request-param-name");
-                    let value = element.value;
-                    if ( ! element.optional && element.defaultValue !== '') {
-                        value = element.defaultValue;
-                    }
-                    if (contentType == "body-form-data"){
-                        header['Content-Type'] = 'multipart/form-data'
-                        bodyFormData[key] = value;
-                        bodyFormDataType[key] = $(element).next().text();
-                    }else {
-                        param[key] = value;
-                        paramType[key] = $(element).next().text();
-                    }
-                });
-            }
-        });
-
-        // grab user-inputted URL
-        let url = $root.find(".sample-request-url").val();
-
-        //Convert {param} form to :param
-        url = url.replace(/{/,':').replace(/}/,'');
-
-        // Insert url parameter
-        const pattern = pathToRegexp(url, null);
-        const matches = pattern.exec(url);
-        for (let i = 1; i < matches.length; i++) {
-            const key = matches[i].substr(1);
-            if (param[key] !== undefined) {
-                url = url.replace(matches[i], encodeURIComponent(param[key]));
-
-                // remove URL parameters from list
-                delete param[key];
-            }
-        } // for
-
-
-        //add url search parameter
-        if (header['Content-Type'] == 'application/json' ){
-            url = url + encodeSearchParams(param);
-            param = bodyJson;
-        }else if (header['Content-Type'] == 'multipart/form-data'){
-            url = url + encodeSearchParams(param);
-            param = bodyFormData;
+define(["jquery", "lodash"], function($, _) {
+  const initDynamic = function() {
+    // Button send
+    $(".sample-request-send").off("click")
+    $(".sample-request-send").on("click", function(e) {
+      e.preventDefault()
+      const $root = $(this).parents("article")
+      const group = $root.data("group")
+      const name = $root.data("name")
+      const version = $root.data("version")
+      sendSampleRequest(group, name, version, $(this).data("sample-request-type"))
+    })
+
+    // Button clear
+    $(".sample-request-clear").off("click")
+    $(".sample-request-clear").on("click", function(e) {
+      e.preventDefault()
+      const $root = $(this).parents("article")
+      const group = $root.data("group")
+      const name = $root.data("name")
+      const version = $root.data("version")
+      clearSampleRequest(group, name, version)
+    })
+  } // initDynamic
+
+  function sendSampleRequest(group, name, version, type) {
+    const $root = $(
+      'article[data-group="' +
+        group +
+        '"][data-name="' +
+        name +
+        '"][data-version="' +
+        version +
+        '"]'
+    )
+
+    // Optional header
+    const header = {}
+    $root.find(".sample-request-header:checked").each(function(i, element) {
+      const group = $(element).data("sample-request-header-group-id")
+      $root.find('[data-sample-request-header-group="' + group + '"]').each(function(i, element) {
+        const key = $(element).data("sample-request-header-name")
+        let value = element.value
+        if (typeof element.optional === "undefined") {
+          element.optional = true
@@ -119,25 +47,29 @@ define([
-
-        $root.find(".sample-request-response").fadeTo(250, 1);
-        $root.find(".sample-request-response-json").html("Loading...");
-        refreshScrollSpy();
-
-        // send AJAX request, catch success or error callback
-        const ajaxRequest = {
-            url        : url,
-            headers    : header,
-            data       : param,
-            type       : type.toUpperCase(),
-            success    : displaySuccess,
-            error      : displayError
-        };
-
-        $.ajax(ajaxRequest);
-
-
-        function displaySuccess(data, status, jqXHR) {
-            let jsonResponse;
-            try {
-                jsonResponse = JSON.parse(jqXHR.responseText);
-                jsonResponse = JSON.stringify(jsonResponse, null, 4);
-            } catch (e) {
-                jsonResponse = jqXHR.responseText;
+        if (!element.optional && element.defaultValue !== "") {
+          value = element.defaultValue
+        }
+        header[key] = value
+      })
+    })
+
+    // create JSON dictionary of parameters
+    let param = {}
+    const paramType = {}
+    const bodyFormData = {}
+    const bodyFormDataType = {}
+    let bodyJson = ""
+    $root.find(".sample-request-param:checked").each(function(i, element) {
+      const group = $(element).data("sample-request-param-group-id")
+      const contentType = $(element)
+        .nextAll(".sample-header-content-type-switch")
+        .first()
+        .val()
+      if (contentType == "body-json") {
+        $root
+          .find('[data-sample-request-body-group="' + group + '"]')
+          .not(function() {
+            return $(this).val() == "" && $(this).is("[data-sample-request-param-optional='true']")
+          })
+          .each(function(i, element) {
+            if (isJson(element.value)) {
+              header["Content-Type"] = "application/json"
+              bodyJson = element.value
@@ -145,12 +77,12 @@ define([
-            $root.find(".sample-request-response-json").text(jsonResponse);
-            refreshScrollSpy();
-        };
-
-        function displayError(jqXHR, textStatus, error) {
-            let message = "Error " + jqXHR.status + ": " + error;
-            let jsonResponse;
-            try {
-                jsonResponse = JSON.parse(jqXHR.responseText);
-                jsonResponse = JSON.stringify(jsonResponse, null, 4);
-            } catch (e) {
-                jsonResponse = jqXHR.responseText;
+          })
+      } else {
+        $root
+          .find('[data-sample-request-param-group="' + group + '"]')
+          .not(function() {
+            return $(this).val() == "" && $(this).is("[data-sample-request-param-optional='true']")
+          })
+          .each(function(i, element) {
+            const key = $(element).data("sample-request-param-name")
+            let value = element.value
+            if (!element.optional && element.defaultValue !== "") {
+              value = element.defaultValue
@@ -172,18 +134,12 @@ define([
-    function clearSampleRequest(group, name, version)
-    {
-        const $root = $('article[data-group="' + group + '"][data-name="' + name + '"][data-version="' + version + '"]');
-
-        // hide sample response
-        $root.find(".sample-request-response-json").html("");
-        $root.find(".sample-request-response").hide();
-
-        // reset value of parameters
-        $root.find(".sample-request-param").each(function(i, element) {
-            element.value = "";
-        });
-
-        // restore default URL
-        const $urlElement = $root.find(".sample-request-url");
-        $urlElement.val($urlElement.prop("defaultValue"));
-
-        refreshScrollSpy();
+    $root.find(".sample-request-response").fadeTo(250, 1)
+    $root.find(".sample-request-response-json").html("Loading...")
+    refreshScrollSpy()
+
+    // send AJAX request, catch success or error callback
+    const ajaxRequest = {
+      url: url,
+      headers: header,
+      data: param,
+      type: type.toUpperCase(),
+      success: displaySuccess,
+      error: displayError
@@ -199,4 +162,19 @@ define([
-    function escapeHtml(str) {
-        const div = document.createElement("div");
-        div.appendChild(document.createTextNode(str));
-        return div.innerHTML;
+    function displayError(jqXHR, textStatus, error) {
+      let message = "Error " + jqXHR.status + ": " + error
+      let jsonResponse
+      try {
+        jsonResponse = JSON.parse(jqXHR.responseText)
+        jsonResponse = JSON.stringify(jsonResponse, null, 4)
+      } catch (e) {
+        jsonResponse = jqXHR.responseText
+      }
+
+      if (jsonResponse) message += "\n" + jsonResponse
+
+      // flicker on previous error to make clear that there is a new response
+      if ($root.find(".sample-request-response").is(":visible"))
+        $root.find(".sample-request-response").fadeTo(1, 0.1)
+
+      $root.find(".sample-request-response").fadeTo(250, 1)
+      $root.find(".sample-request-response-json").text(message)
+      refreshScrollSpy()
@@ -204,17 +182,52 @@ define([
-
-
-    /**
-     * is Json
-     */
-    function isJson(str) {
-        if (typeof str == 'string') {
-            try {
-                const obj=JSON.parse(str);
-                if(typeof obj == 'object' && obj ){
-                    return true;
-                }else{
-                    return false;
-                }
-            } catch(e) {
-                return false;
-            }
+  }
+
+  function clearSampleRequest(group, name, version) {
+    const $root = $(
+      'article[data-group="' +
+        group +
+        '"][data-name="' +
+        name +
+        '"][data-version="' +
+        version +
+        '"]'
+    )
+
+    // hide sample response
+    $root.find(".sample-request-response-json").html("")
+    $root.find(".sample-request-response").hide()
+
+    // reset value of parameters
+    $root.find(".sample-request-param").each(function(i, element) {
+      element.value = ""
+    })
+
+    // restore default URL
+    const $urlElement = $root.find(".sample-request-url")
+    $urlElement.val($urlElement.prop("defaultValue"))
+
+    refreshScrollSpy()
+  }
+
+  function refreshScrollSpy() {
+    $('[data-spy="scroll"]').each(function() {
+      $(this).scrollspy("refresh")
+    })
+  }
+
+  function escapeHtml(str) {
+    const div = document.createElement("div")
+    div.appendChild(document.createTextNode(str))
+    return div.innerHTML
+  }
+
+  /**
+   * is Json
+   */
+  function isJson(str) {
+    if (typeof str == "string") {
+      try {
+        const obj = JSON.parse(str)
+        if (typeof obj == "object" && obj) {
+          return true
+        } else {
+          return false
@@ -223,21 +239,21 @@ define([
-
-    /**
-     * encode Search Params
-     */
-    function encodeSearchParams(obj) {
-        const params = [];
-        Object.keys(obj).forEach((key) => {
-            const value = obj[key];
-            params.push([key, encodeURIComponent(value)].join('='));
-        })
-        return params.length === 0 ? '' : '?' + params.join('&');
-    }
-
-    /**
-     * Exports.
-     */
-    return {
-        initDynamic: initDynamic
-    };
-
-});
+  }
+
+  /**
+   * encode Search Params
+   */
+  function encodeSearchParams(obj) {
+    const params = []
+    Object.keys(obj).forEach(key => {
+      const value = obj[key]
+      params.push([key, encodeURIComponent(value)].join("="))
+    })
+    return params.length === 0 ? "" : "?" + params.join("&")
+  }
+
+  /**
+   * Exports.
+   */
+  return {
+    initDynamic: initDynamic
+  }
+})
